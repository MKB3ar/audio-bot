package com.mkb3ar.telegram.bot

import com.mkb3ar.telegram.dto.UserDataDTO
import com.mkb3ar.telegram.entity.User
import com.mkb3ar.telegram.kafka.KafkaProducerService
import com.mkb3ar.telegram.repository.UserDataRepository
import com.mkb3ar.telegram.repository.UserRepository
import org.springframework.stereotype.Service
import org.telegram.telegrambots.meta.api.methods.AnswerCallbackQuery
import org.telegram.telegrambots.meta.api.methods.send.SendMessage
import org.telegram.telegrambots.meta.api.methods.send.SendPhoto
import org.telegram.telegrambots.meta.api.methods.send.SendVoice
import org.telegram.telegrambots.meta.api.methods.updatingmessages.EditMessageText
import org.telegram.telegrambots.meta.api.objects.CallbackQuery
import org.telegram.telegrambots.meta.api.objects.InputFile
import org.telegram.telegrambots.meta.api.objects.chat.Chat
import org.telegram.telegrambots.meta.api.objects.message.Message
import org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.InlineKeyboardButton
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.InlineKeyboardRow
import org.telegram.telegrambots.meta.exceptions.TelegramApiException
import org.telegram.telegrambots.meta.generics.TelegramClient
import java.io.File as JavaFile

@Service
class BotCommandHandler(
    private val telegramClient: TelegramClient,
    private val userRepository: UserRepository,
    private val botMediaHandler: BotMediaHandler,
    private val userDataRepository: UserDataRepository,
    private val kafkaProducerService: KafkaProducerService
){
    fun handleUnknownCommand(chat: Chat) {
        val messageText = "–Ø –Ω–µ –∑–Ω–∞—é —Ç–∞–∫–æ–π –∫–æ–º–∞–Ω–¥—ã. –í–≤–µ–¥–∏—Ç–µ /start, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Å–ø–∏—Å–æ–∫ –º–æ–∏—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π."
        val sendMessage = SendMessage.builder()
            .chatId(chat.id)
            .text(messageText)
            .build()

        try {
            telegramClient.execute(sendMessage)
        } catch (e: TelegramApiException) {
            e.printStackTrace()
        }
    }
    fun handleStartCommand(chat: Chat) {
        if (!userRepository.existsById(chat.id)) {
            val user = User(
                id = chat.id,
                firstName = chat.firstName,
                lastName = chat.lastName,
                userName = chat.userName
            )
            userRepository.save(user)
        }

        val welcomeText = """
        –ü—Ä–∏–≤–µ—Ç, ${chat.firstName}! –Ø —Ç–≤–æ–π –ª–∏—á–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏ –∞—É–¥–∏–æ ü§ñ
        
        **–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:**
        1.  **–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –∞—É–¥–∏–æ, –≥–æ–ª–æ—Å–æ–≤–æ–µ –∏–ª–∏ –≤–∏–¥–µ–æ—Ñ–∞–π–ª.** –Ø –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏–∑–≤–ª–µ–∫—É –∏–∑ –Ω–µ–≥–æ –∞—É–¥–∏–æ–¥–æ—Ä–æ–∂–∫—É.
        2.  **–î–∞–π —Ñ–∞–π–ª—É –∏–º—è.** –°—Ä–∞–∑—É –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —è —Å–ø—Ä–æ—à—É, –∫–∞–∫ –Ω–∞–∑–≤–∞—Ç—å —Ñ–∞–π–ª. –ü—Ä–æ—Å—Ç–æ –æ—Ç–≤–µ—Ç—å –º–Ω–µ —Ç–µ–∫—Å—Ç–æ–º.
        3.  **–£–ø—Ä–∞–≤–ª—è–π —Ñ–∞–π–ª–∞–º–∏.** –ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É `/check`, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç–≤–æ–∏—Ö —Ñ–∞–π–ª–æ–≤. –ò–∑ —ç—Ç–æ–≥–æ —Å–ø–∏—Å–∫–∞ —Ç—ã —Å–º–æ–∂–µ—à—å –ø—Ä–æ—Å–ª—É—à–∞—Ç—å –∞—É–¥–∏–æ –∏–ª–∏ –ø–æ–ª—É—á–∏—Ç—å –µ–≥–æ –ø–æ–ª–Ω—É—é —Ç–µ–∫—Å—Ç–æ–≤—É—é —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫—É.
        
        **–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**
        `/check` - –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —Ç–≤–æ–∏ —Ñ–∞–π–ª—ã, –ø—Ä–æ—Å–ª—É—à–∞—Ç—å –∏—Ö –∏–ª–∏ –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç.
        `/start` - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.
        `/cat` - –ü—Ä–∏—Å–ª–∞—Ç—å —Ñ–æ—Ç–æ –∫–æ—Ç–∏–∫–∞ (–ø–æ—Ç–æ–º—É —á—Ç–æ –≤—Å–µ –ª—é–±—è—Ç –∫–æ—Ç–∏–∫–æ–≤ üòª).
        """.trimIndent()

        val sendMessage = SendMessage.builder()
            .chatId(chat.id)
            .text(welcomeText)
            .parseMode("Markdown") // –í–∫–ª—é—á–∞–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –∂–∏—Ä–Ω–æ–≥–æ —à—Ä–∏—Ñ—Ç–∞
            .build()
        try {
            telegramClient.execute(sendMessage)
        } catch (e: TelegramApiException) {
            e.printStackTrace()
        }
    }
    fun handlePhotoCommand(chat: Chat, path: String) {
        try {
            val inputFile = botMediaHandler.photoFromURL(path)
            val sendPhoto = SendPhoto.builder()
                .chatId(chat.id)
                .photo(inputFile)
                .caption("–î–µ—Ä–∂–∏ –º–∏–ª–æ—Ç—É!")
                .build()
            telegramClient.execute(sendPhoto)
        } catch (e: Exception) {
            e.printStackTrace()
            val errorMessage = SendMessage.builder()
                .chatId(chat.id)
                .text("–û–π, –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –º–∏–ª–æ—Ç—ã –Ω–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ.")
                .build()
            try {
                telegramClient.execute(errorMessage)
            } catch (apiEx: TelegramApiException) {
                apiEx.printStackTrace()
            }
        }
    }
    fun handleReplyCommand(message: Message, text: String){
        val sendMessage: SendMessage = SendMessage
            .builder()
            .chatId(message.chatId)
            .text(text)
            .replyToMessageId(message.messageId)
            .build()
        try {
            telegramClient.execute(sendMessage)
        } catch (e: Exception){
            e.printStackTrace()
        }
    }
    fun handleFile(message: Message, userFileName: String): Boolean{
        return when {
            message.hasVideo() -> {
                botMediaHandler.saveVideo(message.chat, message.video, userFileName)
                true
            }
            message.hasAudio() -> {
                botMediaHandler.saveAudio(message.chat, message.audio, userFileName)
                true
            }
            message.hasVoice() -> {
                botMediaHandler.saveVoice(message.chat, message.voice, userFileName)
                true
            }
            else -> false
        }
    }
    fun handleCheckCommand(chat: Chat){
        val userFiles = userDataRepository.findUserDataByUser(userRepository.findUserById(chat.id))
        val keyboardRows = mutableListOf<InlineKeyboardRow>()
        userFiles.forEachIndexed { index, userData ->
            val button = InlineKeyboardButton
                .builder()
                .text(userData.userFileName)
                .callbackData("file_${index}")
                .build()
            keyboardRows.add(InlineKeyboardRow(button))
        }
        val keyboardMarkup = InlineKeyboardMarkup.builder().keyboard(keyboardRows).build()
        val message = SendMessage.builder()
            .chatId(chat.id)
            .text("–ö–∞–∫–æ–π —Ñ–∞–π–ª –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å?")
            .replyMarkup(keyboardMarkup)
            .build()
        try {
            telegramClient.execute(message)
        } catch (e: TelegramApiException){
            e.printStackTrace()
        }
    }
    fun handleCallbackQuery(callbackQuery: CallbackQuery) {
        val data = callbackQuery.data
        val chat = callbackQuery.message.chat
        val user = callbackQuery.from
        telegramClient.execute(AnswerCallbackQuery(callbackQuery.id))
        when {
            data.startsWith("file_") -> {
                val fileIndex = data.substringAfter("file_").toIntOrNull() ?: return

                val listenButton = InlineKeyboardButton.builder()
                    .text("üéß –ü—Ä–æ—Å–ª—É—à–∞—Ç—å")
                    .callbackData("listen_$fileIndex")
                    .build()

                val textButton = InlineKeyboardButton.builder()
                    .text("üìÑ –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç")
                    .callbackData("text_$fileIndex")
                    .build()

                val keyboardMarkup = InlineKeyboardMarkup.builder()
                    .keyboardRow(InlineKeyboardRow(listenButton, textButton))
                    .build()

                val editMessage = EditMessageText.builder()
                    .chatId(chat.id)
                    .messageId(callbackQuery.message.messageId)
                    .text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è —Ñ–∞–π–ª–∞:")
                    .replyMarkup(keyboardMarkup)
                    .build()

                try {
                    telegramClient.execute(editMessage)
                } catch (e: Exception) {
                    e.printStackTrace()
                }
            }

            data.startsWith("listen_") -> {
                val fileIndex = data.substringAfter("listen_").toIntOrNull() ?: return

                val dbUserOptional = userRepository.findById(user.id)
                if (dbUserOptional.isEmpty) return
                val userFiles = userDataRepository.findUserDataByUser(dbUserOptional.get())

                if (fileIndex < userFiles.size) {
                    val userData = userFiles[fileIndex]
                    sendMp3AsVoice(chat, userData.filePath)
                }
            }

            // –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê
            data.startsWith("text_") -> {
                try {
                    val fileIndex = data.substringAfter("text_").toIntOrNull() ?: return

                    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ –ø–æ –∏–Ω–¥–µ–∫—Å—É
                    val dbUserOptional = userRepository.findById(user.id)
                    if (dbUserOptional.isEmpty) return
                    val userFiles = userDataRepository.findUserDataByUser(dbUserOptional.get())

                    if (fileIndex < userFiles.size) {
                        val userData = userFiles[fileIndex]

                        // 1. –°–æ–∑–¥–∞–µ–º DTO —Å –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
                        val request = UserDataDTO(
                            chatID = chat.id,
                            userFileName = userData.userFileName,
                            filePath = userData.filePath
                        )
                        // 2. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º DTO –≤ Kafka —á–µ—Ä–µ–∑ –Ω–∞—à —Å–µ—Ä–≤–∏—Å
                        kafkaProducerService.sendFileToProcess(request)

                        // 3. –°–æ–æ–±—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, —á—Ç–æ –∑–∞–ø—Ä–æ—Å –ø—Ä–∏–Ω—è—Ç
                        botMediaHandler.sendReply(chat, "‚úÖ –ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∏–∑ —Ñ–∞–π–ª–∞ '${userData.userFileName}' –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É.")
                    }
                } catch (e: Exception) {
                    e.printStackTrace()
                    botMediaHandler.sendReply(chat, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É.")
                }
            }
        }
    }
    private fun sendMp3AsVoice(chat: Chat, mp3FilePath: String) {
        try {
            val sendVoice = SendVoice.builder()
                .chatId(chat.id)
                .voice(InputFile(JavaFile(mp3FilePath)))
                .build()
            telegramClient.execute(sendVoice)
            println("–¢–µ—Å—Ç–æ–≤–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ MP3 –∫–∞–∫ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –¥–ª—è —Ñ–∞–π–ª–∞: $mp3FilePath")
        } catch (e: Exception) {
            e.printStackTrace()
            botMediaHandler.sendReply(chat, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª –∫–∞–∫ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
        }
    }
}