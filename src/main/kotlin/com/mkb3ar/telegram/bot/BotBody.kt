package com.mkb3ar.telegram.bot

import com.mkb3ar.telegram.entity.User
import org.springframework.web.reactive.function.client.WebClient
import com.mkb3ar.telegram.repository.UserRepository
import org.springframework.beans.factory.annotation.Autowired
import org.springframework.beans.factory.annotation.Value
import org.springframework.http.MediaType
import org.springframework.stereotype.Component
import org.springframework.web.filter.CharacterEncodingFilter
import org.telegram.telegrambots.client.okhttp.OkHttpTelegramClient
import org.telegram.telegrambots.longpolling.BotSession
import org.telegram.telegrambots.longpolling.interfaces.LongPollingUpdateConsumer
import org.telegram.telegrambots.longpolling.starter.AfterBotRegistration
import org.telegram.telegrambots.longpolling.starter.SpringLongPollingBot
import org.telegram.telegrambots.longpolling.util.LongPollingSingleThreadUpdateConsumer
import org.telegram.telegrambots.meta.api.methods.send.SendMessage
import org.telegram.telegrambots.meta.api.methods.send.SendPhoto
import org.telegram.telegrambots.meta.api.objects.InputFile
import org.telegram.telegrambots.meta.api.objects.Update
import org.telegram.telegrambots.meta.exceptions.TelegramApiException
import org.telegram.telegrambots.meta.generics.TelegramClient
import org.telegram.telegrambots.meta.api.objects.chat.Chat
import java.io.ByteArrayInputStream

@Component
class BotBody(
    @Value("\${telegram.bot.token}") private val token: String,
    private val telegramClient: TelegramClient,
    private val botCommandHandler: BotCommandHandler,
    private val userRepository: UserRepository
) : LongPollingSingleThreadUpdateConsumer, SpringLongPollingBot {

    override fun getBotToken(): String = token

    override fun getUpdatesConsumer(): LongPollingUpdateConsumer = this

    override fun consume(update: Update) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—Å—Ç–æ–º
        if (update.hasMessage() && update.message.hasText()) {
            val message = update.message
            val messageText = message.text
            val chat = message.chat

            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∫–æ–º–∞–Ω–¥—ã, –Ω–∞—á–∏–Ω–∞—é—â–∏–µ—Å—è —Å "/"
            if (messageText.startsWith("/")) {
                when (messageText.split(" ")[0]) {
                    "/start" -> handleStartCommand(chat)
                    "/cat" -> handleCatCommand(chat)
                    else -> botCommandHandler.handleUnknownCommand(chat)
                }
            } else {
                // –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∫–æ–º–∞–Ω–¥–æ–π, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É
                botCommandHandler.handleUnknownCommand(chat)
            }
        }
    }

    private fun handleStartCommand(chat: Chat) {
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω –Ω–æ–≤—ã–π
        if (!userRepository.existsById(chat.id.toString())) {
            val user = User(
                id = chat.id, // –ò—Å–ø–æ–ª—å–∑—É–µ–º telegram ID –≤ –∫–∞—á–µ—Å—Ç–≤–µ —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ ID –¥–æ–∫—É–º–µ–Ω—Ç–∞
                firstName = chat.firstName,
                lastName = chat.lastName,
                userName = chat.userName
            )
            userRepository.save(user)
        }

        val welcomeText = """
        –ü—Ä–∏–≤–µ—Ç, ${chat.firstName}! –Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –æ—á–µ–Ω—å –ª—é–±–∏—Ç –∫–æ—Ç–∏–∫–æ–≤ üòª
        
        **–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**
        /cat - –ø—Ä–∏—Å–ª–∞—Ç—å —Å–ª—É—á–∞–π–Ω—É—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –∫–æ—Ç–∏–∫–∞
        """.trimIndent()

        val sendMessage = SendMessage.builder()
            .chatId(chat.id)
            .text(welcomeText)
            .parseMode("Markdown") // –í–∫–ª—é—á–∞–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –∂–∏—Ä–Ω–æ–≥–æ —à—Ä–∏—Ñ—Ç–∞
            .build()

        try {
            telegramClient.execute(sendMessage)
        } catch (e: TelegramApiException) {
            e.printStackTrace()
        }
    }

    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /cat.
     * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ª—É—á–∞–π–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–æ—Ç–∞ —Å —Å–∞–π—Ç–∞ cataas.com.
     */
    private fun handleCatCommand(chat: Chat) {
        try {
            // 1. –í—ã–∑—ã–≤–∞–µ–º –Ω–æ–≤—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∞–π–ª–∞
            val inputFile = getCatPhotoInputFile()

            val sendPhoto = SendPhoto.builder()
                .chatId(chat.id)
                .photo(inputFile)
                .caption("–î–µ—Ä–∂–∏ –∫–æ—Ç–∏–∫–∞!")
                .build()

            telegramClient.execute(sendPhoto)
        } catch (e: Exception) {
            // –û—Ç–ª–∞–≤–ª–∏–≤–∞–µ–º –ª—é–±—ã–µ –æ—à–∏–±–∫–∏ (—Å–µ—Ç–µ–≤—ã–µ –∏–ª–∏ Telegram)
            e.printStackTrace()
            // –°–æ–æ–±—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ –ø—Ä–æ–±–ª–µ–º–µ
            val errorMessage = SendMessage.builder()
                .chatId(chat.id)
                .text("–û–π, –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–æ—Ç–∏–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ.")
                .build()
            try {
                telegramClient.execute(errorMessage)
            } catch (apiEx: TelegramApiException) {
                apiEx.printStackTrace()
            }
        }
    }

    /**
     * **–ù–û–í–´–ô –ú–ï–¢–û–î**
     * –ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–æ—Ç–∞ —Å cataas.com –∏ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –µ–≥–æ –≤ InputFile.
     */
    private fun getCatPhotoInputFile(): InputFile {
        val photoUrl = "https://cataas.com/cat"

        // –ò—Å–ø–æ–ª—å–∑—É–µ–º WebClient –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è HTTP-–∑–∞–ø—Ä–æ—Å–∞
        val webClient = WebClient.create()

        // –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –∏ –ø–æ–ª—É—á–∞–µ–º —Ç–µ–ª–æ –æ—Ç–≤–µ—Ç–∞ –∫–∞–∫ –º–∞—Å—Å–∏–≤ –±–∞–π—Ç.
        // .block() –¥–µ–ª–∞–µ—Ç –≤—ã–∑–æ–≤ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–º, –æ–∂–∏–¥–∞—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞.
        val responseBody: ByteArray? = webClient.get()
            .uri(photoUrl)
            .accept(MediaType.IMAGE_JPEG)
            .retrieve()
            .bodyToMono(ByteArray::class.java) // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–ª–æ –∫–∞–∫ Mono<ByteArray>
            .block() // –ë–ª–æ–∫–∏—Ä—É–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, —á—Ç–æ–±—ã –¥–æ–∂–¥–∞—Ç—å—Å—è –æ—Ç–≤–µ—Ç–∞

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–µ–ª–æ –æ—Ç–≤–µ—Ç–∞ –Ω–µ –ø—É—Å—Ç–æ–µ
        if (responseBody == null) {
            throw RuntimeException("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: —Ç–µ–ª–æ –æ—Ç–≤–µ—Ç–∞ –ø—É—Å—Ç–æ–µ.")
        }

        // –°–æ–∑–¥–∞–µ–º InputFile –∏–∑ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –±–∞–π—Ç–æ–≤
        val inputStream = ByteArrayInputStream(responseBody)
        val fileName = "cat${System.currentTimeMillis()}.jpg" // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞

        return InputFile(inputStream, fileName)
    }

    @AfterBotRegistration
    private fun afterRegistration(botSession: BotSession) {
        println("Registered bot running state is: " + botSession.isRunning)
    }
}
